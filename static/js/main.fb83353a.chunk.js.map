{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","todos","props","query","statusOfFilter","handleChange","event","setState","target","value","onUserSelection","this","lowerCaseQuery","toLowerCase","todosFilter","filter","todo","title","includes","completed","className","type","placeholder","onChange","id","name","map","cn","checked","readOnly","onClick","userId","React","Component","API_URL","loadTodos","a","fetch","response","json","loadUser","CurrentUser","user","reloadUser","prevProps","email","phone","changeUserId","App","selectedUserId","handleUserSelection","data","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb83353a.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport './TodoList.scss';\n\ninterface Props {\n  onUserSelection: (userId: number) => void;\n  todos: Todo[];\n}\n\ninterface State {\n  todos: Todo[];\n  query: string;\n  statusOfFilter: string;\n}\n\nexport class TodoList extends React.Component<Props> {\n  state: State = {\n    todos: [...this.props.todos],\n    query: '',\n    statusOfFilter: '',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      statusOfFilter: event.target.value,\n    });\n  };\n\n  render() {\n    const { onUserSelection } = this.props;\n    const lowerCaseQuery = this.state.query.toLowerCase();\n    let todosFilter = this.state.todos.filter(todo => (\n      todo.title.toLowerCase().includes(lowerCaseQuery)\n    ));\n\n    if (this.state.statusOfFilter === 'active') {\n      todosFilter = todosFilter.filter(todo => !todo.completed);\n    }\n\n    if (this.state.statusOfFilter === 'completed') {\n      todosFilter = todosFilter.filter(todo => todo.completed);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__inputs\">\n          <input\n            type=\"text\"\n            value={this.state.query}\n            className=\"TodoList__input\"\n            placeholder=\"Input title\"\n            onChange={(event) => {\n              this.setState({\n                query: event.target.value,\n              });\n            }}\n          />\n\n          <select\n            className=\"TodoList__input\"\n            id=\"selectUser\"\n            name=\"user\"\n            value={this.state.statusOfFilter}\n            onChange={this.handleChange}\n          >\n            <option value=\"\">\n              Choose a user\n            </option>\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosFilter.map((todo) => (\n              <li\n                key={todo.id}\n                className={cn(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    onUserSelection(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","export const API_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = async () => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const loadUser = async (userId: number) => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n// export const loadUser = (userId: number) => {};\n","import React from 'react';\nimport { loadUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  changeUserId: () => void;\n}\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.reloadUser(this.props.userId);\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.reloadUser(this.props.userId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await loadUser(userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div>User not found</div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={this.props.changeUserId}\n          className=\"button CurrentUser__clear\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const data = await loadTodos();\n\n    this.setState({\n      todos: data,\n    });\n  }\n\n  handleUserSelection = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  changeUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    if (this.state.todos.length === 0) {\n      return 'Loading todos...';\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            onUserSelection={this.handleUserSelection}\n            todos={todos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <>\n                <CurrentUser\n                  userId={selectedUserId}\n                  changeUserId={this.changeUserId}\n                />\n              </>\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}